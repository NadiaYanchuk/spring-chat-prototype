package com.example.chat.config;

import com.example.chat.entity.MessageEntity;
import com.example.chat.entity.RoomEntity;
import com.example.chat.entity.UserEntity;
import com.example.chat.service.MessageEntityService;
import com.example.chat.service.RoomEntityService;
import com.example.chat.service.UserEntityService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
@Slf4j
public class DataLoader implements CommandLineRunner {
    
    private final UserEntityService userService;
    private final RoomEntityService roomService;
    private final MessageEntityService messageService;

    @Override
    public void run(String... args) throws Exception {
        log.info("Starting data initialization...");
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        createTestUsers();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–Ω–∞—Ç—ã
        createTestRooms();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        createTestMessages();
        
        log.info("Data initialization completed!");
    }
    
    private void createTestUsers() {
        log.info("Creating test users...");
        
        try {
            userService.createUser("admin", "admin123", "admin@chat.com");
            userService.createUser("alice", "alice123", "alice@example.com");
            userService.createUser("bob", "bob123", "bob@example.com");
            userService.createUser("charlie", "charlie123", "charlie@example.com");
            
            log.info("Test users created successfully");
        } catch (Exception e) {
            log.warn("Some test users already exist or error occurred: {}", e.getMessage());
        }
    }
    
    private void createTestRooms() {
        log.info("Creating test rooms...");
        
        try {
            UserEntity admin = userService.findByUsername("admin").orElseThrow();
            UserEntity alice = userService.findByUsername("alice").orElseThrow();
            UserEntity bob = userService.findByUsername("bob").orElseThrow();
            
            // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
            roomService.createPublicRoom("General", admin);
            roomService.createPublicRoom("Random", admin);
            roomService.createPublicRoom("Tech Talk", alice);
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É
            roomService.createGroupRoom("Spring Developers", admin);
            
            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
            roomService.createPrivateRoom(alice, bob);
            
            log.info("Test rooms created successfully");
        } catch (Exception e) {
            log.warn("Some test rooms already exist or error occurred: {}", e.getMessage());
        }
    }
    
    private void createTestMessages() {
        log.info("Creating test messages...");
        
        try {
            UserEntity admin = userService.findByUsername("admin").orElseThrow();
            UserEntity alice = userService.findByUsername("alice").orElseThrow();
            UserEntity bob = userService.findByUsername("bob").orElseThrow();
            
            RoomEntity generalRoom = roomService.findByName("General").orElseThrow();
            RoomEntity techRoom = roomService.findByName("Tech Talk").orElseThrow();
            
            // –°–æ–æ–±—â–µ–Ω–∏—è –≤ General –∫–æ–º–Ω–∞—Ç–µ
            messageService.sendMessage(generalRoom, admin, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—â–∏–π —á–∞—Ç!");
            messageService.sendMessage(generalRoom, alice, "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã");
            messageService.sendMessage(generalRoom, bob, "–û—Ç–ª–∏—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞!");
            
            // –°–æ–æ–±—â–µ–Ω–∏—è –≤ Tech Talk –∫–æ–º–Ω–∞—Ç–µ
            messageService.sendMessage(techRoom, alice, "–û–±—Å—É–∂–¥–∞–µ–º Spring Boot –∑–¥–µ—Å—å");
            messageService.sendMessage(techRoom, admin, "–û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è");
            
            // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messageService.sendSystemMessage(generalRoom, admin, "–°–∏—Å—Ç–µ–º–∞ —á–∞—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞", MessageEntity.MessageType.SYSTEM);
            
            log.info("Test messages created successfully");
        } catch (Exception e) {
            log.warn("Error creating test messages: {}", e.getMessage());
        }
    }
}